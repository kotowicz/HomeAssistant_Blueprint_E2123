# Blueprint metadata
blueprint:
  name: deCONZ - IKEA E2123 SYMFONISK Gen 2 Remote
  description: |
    # Controller - IKEA E2123 SYMFONISK Gen 2 Remote

    Controller automation for executing any kind of action triggered by the provided IKEA E2123 SYMFONISK Gen 2 Remote.
    Supports deCONZ

    Based on the Awesome HA Blueprints
    ---> https://epmatt.github.io/awesome-ha-blueprints/

    Made compatible for IKEA Symfonisk Gen 2 by niklas389@GitHub
    ---> 

    ℹ️ Version 2023.41.001
  domain: automation
  input:
    # integration:
    #   name: (Required) Integration
    #   description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
    #   selector:
    #     select:
    #       options:
    #         - deCONZ
    #         - ZHA
    #         - Zigbee2MQTT
    controller_device:
      name: (deCONZ) Controller Device
      description: The controller device to use for the automation.
      default: ""
      selector:
        device:
          integration: deconz

    media_player:
      name: Media Player
      description: The media player to control with this automation
      selector:
        entity:
          domain: media_player
          multiple: false

    volume_steps:
      name: Volume number of steps
      description: Controls the volume scale. The default of 25 is the same scale as the Sonos app.
      default: 0.01
      selector:
        number:
          min: 0.005
          max: 0.1
          step: 0.001
          unit_of_measurement: "Num"
          mode: slider

    # inputs for custom actions
    action_playpause:
      name: (Optional) Play/Pause button short press
      description: Action to run on Play/Pause button press.
      default: []
      selector:
        action:
    action_previous:
      name: (Optional) Previous button short press
      description: Action to run on previous button press.
      default: []
      selector:
        action:
    action_skip:
      name: (Optional) Skip button short press
      description: Action to run on skip button press.
      default: []
      selector:
        action:
    action_volume_up:
      name: (Optional) Volume UP button short press
      description: Action to run on Volume UP button press.
      default: []
      selector:
        action:
    action_volume_down:
      name: (Optional) Volume DOWN button short press
      description: Action to run on Volume DOWN button press.
      default: []
      selector:
        action:
    action_single_dot_short:
      name: (Optional) Left Shortcut short press
      description: Action to run on Left Shortcut press.
      default: []
      selector:
        action:
    action_single_dot_long:
      name: (Optional) Left Shortcut long press
      description: Action to run on Left Shortcut long press.
      default: []
      selector:
        action:
    action_single_dot_double:
      name: (Optional) Left Shortcut double press
      description: Action to run on Left Shortcut double press.
      default: []
      selector:
        action:

    action_double_dot_short:
      name: (Optional) Right Shortcut short press
      description: Action to run on Right Shortcut press.
      default: []
      selector:
        action:
    action_double_dot_long:
      name: (Optional) Right Shortcut long press
      description: Action to run on Right Shortcut long press.
      default: []
      selector:
        action:
    action_double_dot_double:
      name: (Optional) Right Shortcut double press
      description: Action to run on Right Shortcut double press.
      default: []
      selector:
        action:

# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  # integration: !input integration
  # integration id used to select items in the action mapping
  integration_id: "{{ integration | lower }}"

  single_dot_short: ["6002"] #wait for button up, 6000 for instant
  # single_dot_release: ['6002'. '6003']
  single_dot_double: ["6004"]
  single_dot_long: ["6001"]

  double_dot_short: ["7002"] #wait for button up, 7000 for instant
  # double_dot_release: ['7002', '7003']
  double_dot_long: ["7001"]
  double_dot_double: ["7004"]

  playpause_press: ["1002"]
  volume_up_press: ["2001", "2002"]
  volume_down_press: ["3001", "3002"]
  previous_press: ["4002"]
  skip_press: ["5002"]

  # build data to send within a controller event
  controller_device: !input controller_device
  controller_id: "{{controller_device}}"

  player: !input "media_player"
  steps: !input volume_steps
  # stepsize: '{{ steps / 100 }}'

mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type:
      - deconz_event
    event_data:
      device_id: !input controller_device
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {{ trigger.event.data.event }}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}

action:
  - variables:
      trigger_action: >-
        {{ trigger.event.data.event }}

  - choose:
      - conditions: "{{ trigger_action | string in single_dot_short }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: single_dot_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_single_dot_short
  - choose:
      - conditions: "{{ trigger_action | string in single_dot_long }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: single_dot_long
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_single_dot_long
  - choose:
      - conditions: "{{ trigger_action | string in single_dot_double }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: single_dot_double
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_single_dot_double

  - choose:
      - conditions: "{{ trigger_action | string in double_dot_short }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: double_dot_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_double_dot_short
  - choose:
      - conditions: "{{ trigger_action | string in double_dot_long }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: double_dot_long
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_double_dot_long

  - choose:
      - conditions: "{{ trigger_action | string in double_dot_double }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: double_dot_double
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_double_dot_double

  - choose:
      - conditions: "{{ trigger_action | string in playpause_press }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: playpause_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_playpause

  # - choose:
  #     - conditions: '{{ trigger_action | string in playpause_press }}'
  #       sequence:
  #       - service: media_player.media_play_pause
  #         entity_id: !input 'media_player'

  # - choose:
  #     - conditions: '{{ trigger_action | string in previous_press }}'
  #       sequence:
  #       - service: media_player.media_previous_track
  #         entity_id: !input 'media_player'

  - choose:
      - conditions: "{{ trigger_action | string in previous_press }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: previous_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_previous

  # - choose:
  #     - conditions: '{{ trigger_action | string in skip_press }}'
  #       sequence:
  #       - service: media_player.media_next_track
  #         entity_id: !input 'media_player'

  - choose:
      - conditions: "{{ trigger_action | string in skip_press }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: skip_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_skip

  - choose:
      - conditions: "{{ trigger_action | string in volume_up_press }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: volume_up_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_volume_up

  - choose:
      - conditions: "{{ trigger_action | string in volume_down_press }}"
        sequence:
          - choose:
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: "{{ controller_id }}"
                  action: volume_down_press
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_volume_down

  # - choose:
  #     - conditions: '{{ trigger_action | string in volume_up_press }}'
  #       sequence:
  #       - service: media_player.volume_set
  #         target:
  #           entity_id: "{{ player }}"
  #         data:
  #           volume_level: >-
  #             {% set volume = state_attr(player, "volume_level") + steps %}
  #             {{ 0.0 if volume < 0.0 else volume }}

  # - choose:
  #     - conditions: '{{ trigger_action | string in volume_down_press }}'
  #       sequence:
  #       - service: media_player.volume_set
  #         target:
  #           entity_id: "{{ player }}"
  #         data:
  #           volume_level: >-
  #             {% set volume = state_attr(player, "volume_level") - steps %}
  #             {{ 0.0 if volume < 0.0 else volume }}

  # - choose:
  #     - conditions: '{{ trigger_action | string in volume_up_press }}'
  #       sequence:
  #         - choose:
  #           default:
  #             # fire the event
  #             - event: ahb_controller_event
  #               event_data:
  #                 controller: '{{ controller_id }}'
  #                 action: volume_up_press
  #             # run the custom action
  #             - choose:
  #                 - conditions: []
  #                   sequence: !input action_volume_up
  # - choose:
  #     - conditions: '{{ trigger_action | string in volume_down_press }}'
  #       sequence:
  #         - choose:
  #           default:
  #             # fire the event
  #             - event: ahb_controller_event
  #               event_data:
  #                 controller: '{{ controller_id }}'
  #                 action: volume_down_press
  #             # run the custom action
  #             - choose:
  #                 - conditions: []
  #                   sequence: !input action_volume_down
